import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';
import { EmulatorInterface } from '../types/types';

// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞
const EmulatorContext = createContext<EmulatorInterface | undefined>(undefined);

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞
export const useEmulator = (): EmulatorInterface => {
  const context = useContext(EmulatorContext);
  if (context === undefined) {
    throw new Error('useEmulator must be used within an EmulatorProvider');
  }
  return context;
};

export const EmulatorProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤
  const [cashInsertCallback, setCashInsertCallback] = useState<((amount: number) => void) | null>(null);
  const [bankCardCallback, setBankCardCallback] = useState<((success: boolean) => void) | null>(null);
  const [bankCardDisplayCallback, setBankCardDisplayCallback] = useState<((message: string) => void) | null>(null);
  const [vendCallback, setVendCallback] = useState<((success: boolean) => void) | null>(null);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ –≤—Å—Ç–∞–≤–∫–∏ –Ω–∞–ª–∏—á–Ω—ã—Ö
  const startCashin = useCallback((callback: (amount: number) => void) => {
    setCashInsertCallback(() => callback);
    console.log('üîµ –≠–º—É–ª—è—Ç–æ—Ä: –†–µ–∂–∏–º –ø—Ä–∏–µ–º–∞ –Ω–∞–ª–∏—á–Ω—ã—Ö –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+1 –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ 100‚ÇΩ, Ctrl+2 –¥–ª—è 200‚ÇΩ');
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —ç–º—É–ª—è—Ü–∏–∏ –≤—Å—Ç–∞–≤–∫–∏ –Ω–∞–ª–∏—á–Ω—ã—Ö
  const stopCashin = useCallback((callback: () => void) => {
    setCashInsertCallback(null);
    callback();
    console.log('üîµ –≠–º—É–ª—è—Ç–æ—Ä: –†–µ–∂–∏–º –ø—Ä–∏–µ–º–∞ –Ω–∞–ª–∏—á–Ω—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ –æ–ø–ª–∞—Ç—ã –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π
  const bankCardPurchase = useCallback(
    (amount: number, callback: (success: boolean) => void, displayCallback: (message: string) => void) => {
      setBankCardCallback(() => callback);
      setBankCardDisplayCallback(() => displayCallback);
      displayCallback('–ü—Ä–∏–ª–æ–∂–∏—Ç–µ –∫–∞—Ä—Ç—É');
      console.log(`üîµ –≠–º—É–ª—è—Ç–æ—Ä: –†–µ–∂–∏–º –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å—É–º–º—É ${amount}‚ÇΩ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+S –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã, Ctrl+F –¥–ª—è –æ—Ç–∫–∞–∑–∞`);
    },
    []
  );

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–ª–∞—Ç—ã –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π
  const bankCardCancel = useCallback(() => {
    if (bankCardCallback) {
      bankCardCallback(false);
      setBankCardCallback(null);
      setBankCardDisplayCallback(null);
      console.log('üîµ –≠–º—É–ª—è—Ç–æ—Ä: –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –æ—Ç–º–µ–Ω–µ–Ω–∞');
    }
  }, [bankCardCallback]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ø–∏—Ç–∫–∞
  const vend = useCallback((productIdx: number, callback: (success: boolean) => void) => {
    setVendCallback(() => callback);
    console.log(`üîµ –≠–º—É–ª—è—Ç–æ—Ä: –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–∏—Ç–∫–∞ #${productIdx} –Ω–∞—á–∞—Ç–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+P –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è, Ctrl+E –¥–ª—è –æ—à–∏–±–∫–∏`);
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã—Ö —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      // –≠–º—É–ª—è—Ü–∏—è –≤—Å—Ç–∞–≤–∫–∏ –Ω–∞–ª–∏—á–Ω—ã—Ö
      if (e.ctrlKey && cashInsertCallback) {
        if (e.key === '1') {
          cashInsertCallback(100);
          console.log('üîµ –≠–º—É–ª—è—Ç–æ—Ä: –í—Å—Ç–∞–≤–ª–µ–Ω–æ 100‚ÇΩ');
        } else if (e.key === '2') {
          cashInsertCallback(200);
          console.log('üîµ –≠–º—É–ª—è—Ç–æ—Ä: –í—Å—Ç–∞–≤–ª–µ–Ω–æ 200‚ÇΩ');
        }
      }

      // –≠–º—É–ª—è—Ü–∏—è –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π
      if (e.ctrlKey && bankCardCallback) {
        if (e.key === 's' || e.key === 'S') {
          if (bankCardDisplayCallback) {
            bankCardDisplayCallback('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ä—Ç—ã');
            setTimeout(() => {
              bankCardDisplayCallback('–°–≤—è–∑—å —Å –±–∞–Ω–∫–æ–º');
              setTimeout(() => {
                bankCardDisplayCallback('–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞');
                setTimeout(() => {
                  bankCardCallback(true);
                  setBankCardCallback(null);
                  setBankCardDisplayCallback(null);
                }, 1000);
              }, 1000);
            }, 1000);
          }
          console.log('üîµ –≠–º—É–ª—è—Ç–æ—Ä: –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π —É—Å–ø–µ—à–Ω–∞');
        } else if (e.key === 'f' || e.key === 'F') {
          if (bankCardDisplayCallback) {
            bankCardDisplayCallback('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ä—Ç—ã');
            setTimeout(() => {
              bankCardDisplayCallback('–°–≤—è–∑—å —Å –±–∞–Ω–∫–æ–º');
              setTimeout(() => {
                bankCardDisplayCallback('–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã');
                setTimeout(() => {
                  bankCardCallback(false);
                  setBankCardCallback(null);
                  setBankCardDisplayCallback(null);
                }, 1000);
              }, 1000);
            }, 1000);
          }
          console.log('üîµ –≠–º—É–ª—è—Ç–æ—Ä: –û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π');
        }
      }

      // –≠–º—É–ª—è—Ü–∏—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ø–∏—Ç–∫–∞
      if (e.ctrlKey && vendCallback) {
        if (e.key === 'p' || e.key === 'P') {
          setTimeout(() => {
            vendCallback(true);
            setVendCallback(null);
          }, 3000);
          console.log('üîµ –≠–º—É–ª—è—Ç–æ—Ä: –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–∏—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ');
        } else if (e.key === 'e' || e.key === 'E') {
          setTimeout(() => {
            vendCallback(false);
            setVendCallback(null);
          }, 1000);
          console.log('üîµ –≠–º—É–ª—è—Ç–æ—Ä: –û—à–∏–±–∫–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ø–∏—Ç–∫–∞');
        }
      }
    };

    window.addEventListener('keydown', handleKeyDown);
    return () => {
      window.removeEventListener('keydown', handleKeyDown);
    };
  }, [cashInsertCallback, bankCardCallback, bankCardDisplayCallback, vendCallback]);

  // –ó–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞
  const emulatorValue: EmulatorInterface = {
    startCashin,
    stopCashin,
    bankCardPurchase,
    bankCardCancel,
    vend,
  };

  return <EmulatorContext.Provider value={emulatorValue}>{children}</EmulatorContext.Provider>;
}; 